#install.packages("datawizard")
library(datawizard)
### Set WorkDir and load my own R functions
setwd("/Users/robreid/Dropbox (UNC Charlotte)/R/EB-seq_Muday_timecourse/")
##Load data first
## Based on vignette:   https://www.biostat.wisc.edu/~ningleng/EBSeqHMM/EBSeqHMM_vignette_v1.pdf
rawCounts = read_delim('/Users/robreid/bitbucket/flavonoid-rnaseq/72_F3H_PollenTube/results/muday-144-SL4_counts-salmon.txt',delim="\t", col_names = TRUE)
str(rawCounts)
## save description
desc = rawCounts$description
geneid=rawCounts$gene_name
#### Need to make a "Conditions" Vector that describes what time point each
###
###.   THAT THIS MIGHT BREAK ON OTHER INPUT DATA, WE END UP SORTING ALPHABETICAL
###
###
CondVector=c("T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75")
print(CondVector)
#making time points for each of the samples
Conditions=factor(CondVector, levels=c("T15","T30","T45","T75"))
str(Conditions)
#Downstream analysis by EBSeq-HMM requires the conditions to be specified as a factor. In particular,
#levels of the factor need to be sorted along the time/spatial course
levels(Conditions)
###### Choosing a subset via Tidyverse!!!
x = as_tibble(rawCounts)
a28<-select(x,matches("A.28"))
a34<-select(x,matches("A.34"))
v28<-select(x,matches("V.28"))
v34<-select(x,matches("V.34"))
f28<-select(x,matches("F.28"))
f34<-select(x,matches("F.34"))
##Make a function to run EBseq-HMM
fetch_UPDownGeneCalls <- function(tibby,condy) {
dim(tibby)
tibby <- tibby[,order(colnames(tibby))]  ##Reordering the columns to match the conditions
mat <- as.data.frame(tibby)
rownames(mat) <- geneid
head(mat)
Sizes=MedianNorm(mat)
qSizes=QuantileNorm(mat,.75)
print(qSizes)
GeneNormData=GetNormalizedMat(mat, Sizes)
EBSeqHMMGeneOut=EBSeqHMMTest(Data=data.matrix(mat), sizeFactors=Sizes, Conditions=condy,UpdateRd=50)
dim(EBSeqHMMGeneOut)
GeneDECalls=GetDECalls(EBSeqHMMGeneOut, FDR=.05)
#print the gene COnf calls summary
GeneConfCalls=GetConfidentCalls(EBSeqHMMGeneOut, FDR=.05,cutoff=.5, OnlyDynamic=F)
print(GeneConfCalls$NumEach) ##We print these, but results are not returned. Should make a separate function.
list_data <- list(GeneDECalls,GeneConfCalls$NumEach,GeneNormData)
return(list_data)
}
## Run each of the experimental conditions.
a28gc <- fetch_UPDownGeneCalls(a28,Conditions)
a34gc <- fetch_UPDownGeneCalls(a34,Conditions)
v28gc <- fetch_UPDownGeneCalls(v28,Conditions)
v34gc <- fetch_UPDownGeneCalls(v34,Conditions)
f28gc <- fetch_UPDownGeneCalls(f28,Conditions)
f34gc <- fetch_UPDownGeneCalls(f34,Conditions)
write.table(a28gc[1], file=sprintf("a28gc_ebseqGeneCalls-SL4.txt"))
write.table(a34gc[1], file=sprintf("a34gc_ebseqGeneCalls-SL4.txt"))
write.table(v28gc[1], file=sprintf("v28gc_ebseqGeneCalls-SL4.txt"))
write.table(v34gc[1], file=sprintf("v34gc_ebseqGeneCalls-SL4.txt"))
write.table(f28gc[1], file=sprintf("f28gc_ebseqGeneCalls-SL4.txt"))
write.table(f34gc[1], file=sprintf("f34gc_ebseqGeneCalls-SL4.txt"))
## Write out Number of genes per path
write.table(a28gc[2], file=sprintf("a28gc_numIneachPath-SL4.txt"))
write.table(a34gc[2], file=sprintf("a34gc_numIneachPath-SL4.txt"))
write.table(v28gc[2], file=sprintf("v28gc_numIneachPath-SL4.txt"))
write.table(v34gc[2], file=sprintf("v34gc_numIneachPath-SL4.txt"))
write.table(f28gc[2], file=sprintf("f28gc_numIneachPath-SL4.txt"))
write.table(f34gc[2], file=sprintf("f34gc_numIneachPath-SL4.txt"))
##Run the entire Set at ONCE
justdata<-select(x,matches("."))
dim(justdata)
head(justdata)
justdata <- select(justdata, -gene_name)
justdata <- select(justdata, -description)
justdata <- justdata[,order(colnames(justdata))]
colnames(justdata)
CondVector2=c("T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75","T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75","T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75","T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75","T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75","T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75")
print(CondVector2)
Conditions2=factor(CondVector2, levels=c("T15","T30","T45","T75"))
allgc <- fetch_UPDownGeneCalls(justdata, Conditions2)
#Estimated expected FC 2
#Up-Up-Up     Down-Up-Up     Up-Down-Up   Down-Down-Up     Up-Up-Down   Down-Up-Down   Up-Down-Down
#4              2              0              0              2              3             11
#EE-Up-Up       Up-EE-Up       EE-EE-Up     Down-EE-Up     EE-Down-Up       Up-Up-EE       EE-Up-EE
#0              0              0              0              0              0              0
#Down-Up-EE       Up-EE-EE     Up-Down-EE     EE-Up-Down     Up-EE-Down Down-Down-Down     Down-EE-EE
#0              0              0              0              0            141              0
#EE-Down-EE   Down-Down-EE     EE-EE-Down   Down-EE-Down   EE-Down-Down
#0              0              0              0              0
foo <- GetAllPaths(allgc)
## The Purge
rm(list = ls())
install.packages("edgeR")
BiocManager::install("edgeR")
tinytex::install_tinytex()
getwd()
knitr::opts_chunk$set(echo = TRUE)
assemblies=c("SL4","SL5")
Q = 0.05
lfcThreshold=1
outfname_prefix="results/MvW-temp"
source("Common.R")
dfs = list()
for (assembly in assemblies) {
dfs[[assembly]]=getCounts(assembly=assembly,
keep_description = T)
}
getDEgenes_time <- function(minute) {
ddss = list()
for (assembly in assemblies) {
d = dfs[[assembly]]
desc_index = which(names(d)=="description")
d = d[,-desc_index]
toks = strsplit(names(d),"\\.")
genotype=sapply(toks,function(x){x[[1]]})
temperature=sapply(toks,function(x){x[[2]]})
time=sapply(toks,function(x){x[[3]]})
v = genotype%in%c("A","V")&time==minute
d = d[,v]
coldata=data.frame(genotype=factor(genotype[v],levels=c("V","A")),
temperature=factor(temperature[v], levels = c("28","34")))
row.names(coldata)=names(d)
cts = round(as.matrix(d))
dds = DESeqDataSetFromMatrix(countData=cts,
colData=coldata,
design=~genotype + temperature + genotype:temperature)
featureData = data.frame(gene=rownames(cts))
mcols(dds) = DataFrame(mcols(dds), featureData)
dds = DESeq(dds, minReplicatesForReplace=Inf)
ddss[[assembly]]=dds
}
return(ddss)
}
results_time <- function(ddss, minute) {
rss=list()
for (assembly in assemblies) {
dds=ddss[[assembly]]
rs = results(dds,alpha=Q,lfcThreshold = lfcThreshold,
name="genotypeA.temperature34")
rs = rs[!is.na(rs$padj),]
rs=cbind(gene=row.names(rs),rs)
rs["time"] = minute
rs$description = dfs[[assembly]][rs$gene,"description"]
if (assembly == "SL5") {
SL4_gene_names = getSL4GeneNames(rs$description)
rs$SL4 = SL4_gene_names
}
o = order(rs$pvalue)
rs = rs[o,]
rss[[assembly]]=data.frame(rs)
}
return(rss)
}
min15 <- getDEgenes_time(15)
res15 <- results_time(min15, 15)
min30 <- getDEgenes_time(30)
res30 <- results_time(min30, 30)
min45 <- getDEgenes_time(45)
res45 <- results_time(min45, 45)
min75 <- getDEgenes_time(75)
res75 <- results_time(min75, 75)
combined_results <- rbind(res15, res30, res45, res75)
SL4 <- combined_results[,1]
SL5 <- combined_results[,2]
library(openxlsx)
assembly="SL4"
outfname=paste0(outfname_prefix,"-",assembly,".xlsx")
data_frames <- list("15 minutes" = SL4$res15, "30 minutes" = SL4$res30,
"45 minutes" = SL4$res45,"75 minutes" = SL4$res75 )
write.xlsx(data_frames, file = outfname)
assembly="SL5"
outfname=paste0(outfname_prefix,"-",assembly,".xlsx")
data_frames <- list("15 minutes" = SL5$res15, "30 minutes" = SL5$res30,
"45 minutes" = SL5$res45,"75 minutes" = SL5$res75 )
write.xlsx(data_frames, file = outfname)
sessionInfo()
getwd()
knitr::opts_chunk$set(echo = TRUE)
assemblies=c("SL4","SL5")
Q = 0.05
lfcThreshold=0
outfname_prefix="results/MvW-temp"
source("Common.R")
dfs = list()
for (assembly in assemblies) {
dfs[[assembly]]=getCounts(assembly=assembly,
keep_description = T)
}
getDEgenes_time <- function(minute) {
ddss = list()
for (assembly in assemblies) {
d = dfs[[assembly]]
desc_index = which(names(d)=="description")
d = d[,-desc_index]
toks = strsplit(names(d),"\\.")
genotype=sapply(toks,function(x){x[[1]]})
temperature=sapply(toks,function(x){x[[2]]})
time=sapply(toks,function(x){x[[3]]})
v = genotype%in%c("A","V")&time==minute
d = d[,v]
coldata=data.frame(genotype=factor(genotype[v],levels=c("V","A")),
temperature=factor(temperature[v], levels = c("28","34")))
row.names(coldata)=names(d)
cts = round(as.matrix(d))
dds = DESeqDataSetFromMatrix(countData=cts,
colData=coldata,
design=~genotype + temperature + genotype:temperature)
featureData = data.frame(gene=rownames(cts))
mcols(dds) = DataFrame(mcols(dds), featureData)
dds = DESeq(dds, minReplicatesForReplace=Inf)
ddss[[assembly]]=dds
}
return(ddss)
}
results_time <- function(ddss, minute) {
rss=list()
for (assembly in assemblies) {
dds=ddss[[assembly]]
rs = results(dds,alpha=Q,lfcThreshold = lfcThreshold,
name="genotypeA.temperature34")
rs = rs[!is.na(rs$padj),]
rs=cbind(gene=row.names(rs),rs)
rs["time"] = minute
rs$description = dfs[[assembly]][rs$gene,"description"]
if (assembly == "SL5") {
SL4_gene_names = getSL4GeneNames(rs$description)
rs$SL4 = SL4_gene_names
}
o = order(rs$pvalue)
rs = rs[o,]
rss[[assembly]]=data.frame(rs)
}
return(rss)
}
min15 <- getDEgenes_time(15)
res15 <- results_time(min15, 15)
min30 <- getDEgenes_time(30)
res30 <- results_time(min30, 30)
min45 <- getDEgenes_time(45)
res45 <- results_time(min45, 45)
min75 <- getDEgenes_time(75)
res75 <- results_time(min75, 75)
combined_results <- rbind(res15, res30, res45, res75)
SL4 <- combined_results[,1]
SL5 <- combined_results[,2]
library(openxlsx)
assembly="SL4"
outfname=paste0(outfname_prefix,"-",assembly,".xlsx")
data_frames <- list("15 minutes" = SL4$res15, "30 minutes" = SL4$res30,
"45 minutes" = SL4$res45,"75 minutes" = SL4$res75 )
write.xlsx(data_frames, file = outfname)
assembly="SL5"
outfname=paste0(outfname_prefix,"-",assembly,".xlsx")
data_frames <- list("15 minutes" = SL5$res15, "30 minutes" = SL5$res30,
"45 minutes" = SL5$res45,"75 minutes" = SL5$res75 )
write.xlsx(data_frames, file = outfname)
sessionInfo()
library(RColorBrewer)
library(EBSeq)
library(EBSeqHMM)
library(tidyverse)
#install.packages("datawizard")
library(datawizard)
## The Purge
rm(list = ls())
setwd("/Users/robreid/Dropbox (UNC Charlotte)/R/EB-seq_Muday_timecourse/")
#source("/Users/robreid/Dropbox (UNC Charlotte)/R/EB-seq_Muday_timecourse/RNAseq_fnxs.R")
##Load data first
## Based on vignette:   https://www.biostat.wisc.edu/~ningleng/EBSeqHMM/EBSeqHMM_vignette_v1.pdf
rawCounts = read_delim('/Users/robreid/bitbucket/flavonoid-rnaseq/72_F3H_PollenTube/results/muday-144-SL4_counts-salmon.txt',delim="\t", col_names = TRUE)
str(rawCounts)
## save description
desc = rawCounts$description
geneid=rawCounts$gene_name
#### Need to make a "Conditions" Vector that describes what time point each
###
###.   THAT THIS MIGHT BREAK ON OTHER INPUT DATA, WE END UP SORTING ALPHABETICAL
###
###
CondVector=c("T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75")
print(CondVector)
#making time points for each of the samples
Conditions=factor(CondVector, levels=c("T15","T30","T45","T75"))
str(Conditions)
#Downstream analysis by EBSeq-HMM requires the conditions to be specified as a factor. In particular,
#levels of the factor need to be sorted along the time/spatial course
levels(Conditions)
###### Choosing a subset via Tidyverse!!!
x = as_tibble(rawCounts)
a28<-select(x,matches("A.28"))
a34<-select(x,matches("A.34"))
v28<-select(x,matches("V.28"))
v34<-select(x,matches("V.34"))
f28<-select(x,matches("F.28"))
f34<-select(x,matches("F.34"))
##Make a function to run EBseq-HMM
fetch_UPDownGeneCalls <- function(tibby,condy) {
dim(tibby)
tibby <- tibby[,order(colnames(tibby))]  ##Reordering the columns to match the conditions
mat <- as.data.frame(tibby)
rownames(mat) <- geneid
head(mat)
Sizes=MedianNorm(mat)
qSizes=QuantileNorm(mat,.75)
print(qSizes)
GeneNormData=GetNormalizedMat(mat, Sizes)
EBSeqHMMGeneOut=EBSeqHMMTest(Data=data.matrix(mat), sizeFactors=Sizes, Conditions=condy,UpdateRd=50)
dim(EBSeqHMMGeneOut)
GeneDECalls=GetDECalls(EBSeqHMMGeneOut, FDR=.05)
#print the gene COnf calls summary
GeneConfCalls=GetConfidentCalls(EBSeqHMMGeneOut, FDR=.05,cutoff=.5, OnlyDynamic=F)
print(GeneConfCalls$NumEach) ##We print these, but results are not returned. Should make a separate function.
list_data <- list(GeneDECalls,GeneConfCalls$NumEach,GeneNormData)
return(list_data)
}
## Run each of the experimental conditions.
a28gc <- fetch_UPDownGeneCalls(a28,Conditions)
a34gc <- fetch_UPDownGeneCalls(a34,Conditions)
v28gc <- fetch_UPDownGeneCalls(v28,Conditions)
v34gc <- fetch_UPDownGeneCalls(v34,Conditions)
f28gc <- fetch_UPDownGeneCalls(f28,Conditions)
f34gc <- fetch_UPDownGeneCalls(f34,Conditions)
write.table(a28gc[1], file=sprintf("a28gc_ebseqGeneCalls-SL4.txt"))
write.table(a34gc[1], file=sprintf("a34gc_ebseqGeneCalls-SL4.txt"))
write.table(v28gc[1], file=sprintf("v28gc_ebseqGeneCalls-SL4.txt"))
write.table(v34gc[1], file=sprintf("v34gc_ebseqGeneCalls-SL4.txt"))
write.table(f28gc[1], file=sprintf("f28gc_ebseqGeneCalls-SL4.txt"))
write.table(f34gc[1], file=sprintf("f34gc_ebseqGeneCalls-SL4.txt"))
## Write out Number of genes per path
write.table(a28gc[2], file=sprintf("a28gc_numIneachPath-SL4.txt"))
write.table(a34gc[2], file=sprintf("a34gc_numIneachPath-SL4.txt"))
write.table(v28gc[2], file=sprintf("v28gc_numIneachPath-SL4.txt"))
write.table(v34gc[2], file=sprintf("v34gc_numIneachPath-SL4.txt"))
write.table(f28gc[2], file=sprintf("f28gc_numIneachPath-SL4.txt"))
write.table(f34gc[2], file=sprintf("f34gc_numIneachPath-SL4.txt"))
##Run the entire Set at ONCE
### This is a test of feeding all the experiements in at once as a time course comparison
### This is a pointless pursuit for the most part. Although there are a few genes that universally appear to show a pattern.
#justdata<-select(x,matches("."))
#dim(justdata)
#head(justdata)
#justdata <- select(justdata, -gene_name)
#justdata <- select(justdata, -description)
#justdata <- justdata[,order(colnames(justdata))]
#colnames(justdata)
#CondVector2=c("T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75","T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75","T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75","T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75","T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75","T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75")
#print(CondVector2)
#Conditions2=factor(CondVector2, levels=c("T15","T30","T45","T75"))
#allgc <- fetch_UPDownGeneCalls(justdata, Conditions2)
#Estimated expected FC 2
#Up-Up-Up     Down-Up-Up     Up-Down-Up   Down-Down-Up     Up-Up-Down   Down-Up-Down   Up-Down-Down
#4              2              0              0              2              3             11
#EE-Up-Up       Up-EE-Up       EE-EE-Up     Down-EE-Up     EE-Down-Up       Up-Up-EE       EE-Up-EE
#0              0              0              0              0              0              0
#Down-Up-EE       Up-EE-EE     Up-Down-EE     EE-Up-Down     Up-EE-Down Down-Down-Down     Down-EE-EE
#0              0              0              0              0            141              0
#EE-Down-EE   Down-Down-EE     EE-EE-Down   Down-EE-Down   EE-Down-Down
#0              0              0              0              0
df <- data.frame (a28gc[1])
df
write.table(df,"test.txt")
write_tsv(df,"test.txt")
write.table(a28gc[1], file=sprintf("test2.txt"),col.names = TRUE)
head(a28gc[1])
rownames(a28gc[1])
rownames(a28gc[2])
head(a28gc[2])
head(a28gc[3])
head(a28gc[1][1])
head(df)
rownames(df)
write_tsv(df,"test.txt",rownames()=TRUE)
?write_tsv
write_tsv(df,"test.txt",delim="\t",col_names = !append)
write_tsv(df,"test.txt",delim='\t',col_names = !append)
write_tsv(df,"test.txt",col_names = !append)
write_tsv(df,"test.txt",col_names = append)
write_tsv(df,"test.txt",col_names = TRUE)
df[,1]
df[,2]
rownames(df)
library("writexl")
install.packages("library("writexl")")
library("writexl")
install.packages("writexl")
library("writexl")
write_xlsx(df,"test.xlsx")
?write_xlsx
write_xlsx(df,"test.xlsx",format_headers = TRUE)
write.tsv(df,"test.txt",col_names = TRUE)
write.table(df,"test.txt",col_names = TRUE)
write.table(df,"test.txt")
df <- data.frame (a28gc[1])
write.table(a28gc[1], file=sprintf("a28gc_ebseqGeneCalls-SL4.txt"),col.names = NA)
write.table(a28gc[1], file=sprintf("a28gc_ebseqGeneCalls-SL4.txt"),col.names = NA)
write.table(df,"test.txt",col.names = NA)
df <- as.data.frame(a28gc[1])
df
df %>% rownames_to_column('Soly_ID')
head(df)
df %>% rownames_to_column('Soly_ID')
rownames(df)
rowid_to_column(df) %>% head()
row.names_to_column(df) %>% head()
rownames_to_column(df) %>% head()
df = rownames_to_column(df)
write_delim(df,col_names = TRUE, file'"test3.txt')
write_delim(df,col_names = TRUE, file=sprintf('test3.txt')
)
write_delim(df,col_names = TRUE, file=sprintf('test3.txt'))
write_delim(df,col_names = TRUE, file=sprintf('test3.txt'),delim = '\t')
write_delim(rownames_to_column(a28gc[1]), file=sprintf("a28gc_ebseqGeneCalls-SL4.txt"),col_names = TRUE)
a28df <- data.frame (a28gc[1])
a34df <- data.frame (a34gc[1])
v28df <- data.frame (v28gc[1])
v34df <- data.frame (v34gc[1])
f28df <- data.frame (f28gc[1])
f34df <- data.frame (f34gc[1])
write_delim(rownames_to_column(a28df), file=sprintf("a28gc_ebseqGeneCalls-SL4.txt"),col_names = TRUE)
write_delim(rownames_to_column(a28df), file=sprintf("a28_ebseqGeneCalls-SL4.txt"),col_names = TRUE,delim='\t')
write_delim(rownames_to_column(a34df), file=sprintf("a34_ebseqGeneCalls-SL4.txt"),col_names = TRUE,delim='\t')
write_delim(rownames_to_column(v28df), file=sprintf("v28_ebseqGeneCalls-SL4.txt"),col_names = TRUE,delim='\t')
write_delim(rownames_to_column(v34df), file=sprintf("v34_ebseqGeneCalls-SL4.txt"),col_names = TRUE,delim='\t')
write_delim(rownames_to_column(f28df), file=sprintf("f28_ebseqGeneCalls-SL4.txt"),col_names = TRUE,delim='\t')
write_delim(rownames_to_column(f34df), file=sprintf("f34_ebseqGeneCalls-SL4.txt"),col_names = TRUE,delim='\t')
rm(list = ls())
### Set WorkDir and load my own R functions
setwd("/Users/robreid/Dropbox (UNC Charlotte)/R/EB-seq_Muday_timecourse/")
#source("/Users/robreid/Dropbox (UNC Charlotte)/R/EB-seq_Muday_timecourse/RNAseq_fnxs.R")
##Load data first
## Based on vignette:   https://www.biostat.wisc.edu/~ningleng/EBSeqHMM/EBSeqHMM_vignette_v1.pdf
rawCounts = read_delim('/Users/robreid/bitbucket/flavonoid-rnaseq/72_F3H_PollenTube/results/muday-144-SL4_counts-salmon.txt',delim="\t", col_names = TRUE)
str(rawCounts)
## save description
desc = rawCounts$description
geneid=rawCounts$gene_name
#### Need to make a "Conditions" Vector that describes what time point each
###
###.   THAT THIS MIGHT BREAK ON OTHER INPUT DATA, WE END UP SORTING ALPHABETICAL
###
###
CondVector=c("T15","T15","T15","T30","T30","T30","T45","T45","T45","T75","T75","T75")
print(CondVector)
#making time points for each of the samples
Conditions=factor(CondVector, levels=c("T15","T30","T45","T75"))
str(Conditions)
#Downstream analysis by EBSeq-HMM requires the conditions to be specified as a factor. In particular,
#levels of the factor need to be sorted along the time/spatial course
levels(Conditions)
###### Choosing a subset via Tidyverse!!!
x = as_tibble(rawCounts)
a28<-select(x,matches("A.28"))
a34<-select(x,matches("A.34"))
v28<-select(x,matches("V.28"))
v34<-select(x,matches("V.34"))
f28<-select(x,matches("F.28"))
f34<-select(x,matches("F.34"))
##Make a function to run EBseq-HMM
fetch_UPDownGeneCalls <- function(tibby,condy) {
dim(tibby)
tibby <- tibby[,order(colnames(tibby))]  ##Reordering the columns to match the conditions
mat <- as.data.frame(tibby)
rownames(mat) <- geneid
head(mat)
Sizes=MedianNorm(mat)
qSizes=QuantileNorm(mat,.75)
print(qSizes)
GeneNormData=GetNormalizedMat(mat, Sizes)
EBSeqHMMGeneOut=EBSeqHMMTest(Data=data.matrix(mat), sizeFactors=Sizes, Conditions=condy,UpdateRd=50)
dim(EBSeqHMMGeneOut)
GeneDECalls=GetDECalls(EBSeqHMMGeneOut, FDR=.05)
#print the gene COnf calls summary
GeneConfCalls=GetConfidentCalls(EBSeqHMMGeneOut, FDR=.05,cutoff=.5, OnlyDynamic=F)
print(GeneConfCalls$NumEach) ##We print these, but results are not returned. Should make a separate function.
list_data <- list(GeneDECalls,GeneConfCalls$NumEach,GeneNormData)
return(list_data)
}
## Run each of the experimental conditions.
a28gc <- fetch_UPDownGeneCalls(a28,Conditions)
a34gc <- fetch_UPDownGeneCalls(a34,Conditions)
v28gc <- fetch_UPDownGeneCalls(v28,Conditions)
v34gc <- fetch_UPDownGeneCalls(v34,Conditions)
f28gc <- fetch_UPDownGeneCalls(f28,Conditions)
f34gc <- fetch_UPDownGeneCalls(f34,Conditions)
## Grabbing the 1st element in the ebseq object for writing out to tab delimted table.
a28df <- data.frame (a28gc[1])
a34df <- data.frame (a34gc[1])
v28df <- data.frame (v28gc[1])
v34df <- data.frame (v34gc[1])
f28df <- data.frame (f28gc[1])
f34df <- data.frame (f34gc[1])
write_delim(rownames_to_column(a28df), file=sprintf("a28_ebseq-SL4.txt"),col_names = TRUE,delim='\t')
write_delim(rownames_to_column(a34df), file=sprintf("a34_ebseq-SL4.txt"),col_names = TRUE,delim='\t')
write_delim(rownames_to_column(v28df), file=sprintf("v28_ebseq-SL4.txt"),col_names = TRUE,delim='\t')
write_delim(rownames_to_column(v34df), file=sprintf("v34_ebseq-SL4.txt"),col_names = TRUE,delim='\t')
write_delim(rownames_to_column(f28df), file=sprintf("f28_ebseq-SL4.txt"),col_names = TRUE,delim='\t')
write_delim(rownames_to_column(f34df), file=sprintf("f34_ebseq-SL4.txt"),col_names = TRUE,delim='\t')
## Write out Number of genes per path
write.table(a28gc[2], file=sprintf("a28gc_numIneachPath-SL4.txt"))
write.table(a34gc[2], file=sprintf("a34gc_numIneachPath-SL4.txt"))
write.table(v28gc[2], file=sprintf("v28gc_numIneachPath-SL4.txt"))
write.table(v34gc[2], file=sprintf("v34gc_numIneachPath-SL4.txt"))
write.table(f28gc[2], file=sprintf("f28gc_numIneachPath-SL4.txt"))
write.table(f34gc[2], file=sprintf("f34gc_numIneachPath-SL4.txt"))
library(shiny); runApp('~/Dropbox (UNC Charlotte)/R/rshiny-muday/BarplotApp.R')
runApp('~/Dropbox (UNC Charlotte)/R/rshiny-muday/BarplotApp.R')
runApp('~/Dropbox (UNC Charlotte)/R/rshiny-muday/BarplotApp.R')
runApp('~/Dropbox (UNC Charlotte)/R/rshiny-muday/BarplotApp.R')
